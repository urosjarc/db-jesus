package com.urosjarc.dbmessiah.impl

import com.urosjarc.dbmessiah.Test_Serializer
import com.urosjarc.dbmessiah.data.Query
import com.urosjarc.dbmessiah.data.QueryValue
import com.urosjarc.dbmessiah.domain.C
import com.urosjarc.dbmessiah.domain.Table
import com.urosjarc.dbmessiah.impl.db2.Db2Schema
import com.urosjarc.dbmessiah.impl.db2.Db2Serializer
import com.urosjarc.dbmessiah.serializers.AllTS
import com.urosjarc.dbmessiah.serializers.StringTS
import com.urosjarc.dbmessiah.serializers.UUIDTS
import org.junit.jupiter.api.BeforeEach
import java.sql.JDBCType
import java.util.*
import kotlin.test.Test
import kotlin.test.assertEquals

class Test_Db2Serializer : Test_Serializer() {
    override fun wrap(name: String): String = "\"$name\""

    @BeforeEach
    override fun init() {
        super.init()
        this.otherTables = listOf(
            Table(
                Other::pk, foreignKeys = listOf(
                    Other::cascades to Other::class
                ), constraints = listOf(
                    Other::unique to listOf(C.UNIQUE),
                    Other::cascades to listOf(C.CASCADE_DELETE)
                )
            )
        )
        this.schema = Db2Schema(name = "schema", tables = this.tables + this.otherTables + this.tablesNonAutoUUID)
        this.ser = Db2Serializer(
            schemas = listOf(this.schema as Db2Schema),
            globalProcedures = listOf(TestProcedure::class, TestProcedureEmpty::class),
            globalSerializers = AllTS.sqlite,
        )
    }

    @Test
    override fun `test plantUML`() {
        assertEquals(
            actual = this.ser.plantUML(),
            expected = listOf(
                "@startuml",
                "skinparam backgroundColor darkgray",
                "skinparam ClassBackgroundColor lightgray",
                "",
                "package schema <<Folder>> {",
                "\t class schema.Parent {",
                "\t\t pk: Int",
                "\t }",
                "\t class schema.Child {",
                "\t\t pk: Int",
                "\t\t fk: Parent",
                "\t }",
                "\t class schema.Other {",
                "\t\t pk: Int",
                "\t\t cascades: Other",
                "\t }",
                "\t class schema.UUIDChild {",
                "\t\t pk: UUID",
                "\t }",
                "}",
                "",
                "schema.Child -down-> schema.Parent: fk",
                "schema.Other -down-> schema.Other: cascades",
                "",
                "@enduml"
            ).joinToString("\n")
        )
    }

    @Test
    override fun `test escaped name`() {
        assertEquals(expected = "\"name\"", actual = ser.escaped("name"))
    }

    @Test
    override fun `test createTable`() {
        assertEquals(
            expected = this.ser.createTable(Parent::class),
            actual = Query(sql = """CREATE TABLE IF NOT EXISTS "schema"."Parent" ("pk" INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY NOT NULL, "col" VARCHAR(100) NOT NULL)"""),
        )
        assertEquals(
            expected = this.ser.createTable(Child::class),
            actual = Query(sql = """CREATE TABLE IF NOT EXISTS "schema"."Child" ("pk" INTEGER PRIMARY KEY NOT NULL, "fk" INTEGER NOT NULL, "col" VARCHAR(100) NOT NULL, FOREIGN KEY ("fk") REFERENCES "schema"."Parent" ("pk"))"""),
        )
        assertEquals(
            expected = this.ser.createTable(Other::class),
            actual = Query(sql = """CREATE TABLE IF NOT EXISTS "schema"."Other" ("pk" INTEGER PRIMARY KEY NOT NULL, "cascades" INTEGER NOT NULL, "canBeNull" INTEGER, "notNull" INTEGER NOT NULL, "unique" INTEGER NOT NULL UNIQUE, FOREIGN KEY ("cascades") REFERENCES "schema"."Other" ("pk") ON DELETE CASCADE)"""),
        )
    }

    @Test
    override fun `test dropSchema`() {
        assertEquals(
            actual = this.ser.dropSchema(schema = this.schema),
            expected = Query(sql = "DROP SCHEMA schema RESTRICT")
        )
        assertEquals(
            actual = this.ser.dropSchema(schema = this.schema, cascade = true),
            expected = Query(sql = "DROP SCHEMA schema RESTRICT")
        )
    }

    @Test
    override fun `test createSchema`() {
        assertEquals(
            actual = this.ser.createSchema(schema = this.schema),
            expected = Query(sql = "CREATE SCHEMA schema")
        )
    }

    @Test
    override fun `test insertRow auto UUID incremental`() = Unit

    @Test
    override fun `test insertRow non auto uuid incremental`() {
        listOf(false, true).forEach {
            val row = UUIDChild(pk = UUID.randomUUID(), fk = UUID.randomUUID(), col = "col123")
            assertEquals(
                actual = this.ser.insertRow(row, batch = it),
                expected = Query(
                    sql = "INSERT INTO ${wrap("schema")}.${wrap("UUIDChild")} (${wrap("pk")}, ${wrap("col")}, ${wrap("fk")}) VALUES (?, ?, ?)",
                    QueryValue(name = "pk", value = row.pk, jdbcType = JDBCType.CHAR, encoder = UUIDTS.sqlite.encoder),
                    QueryValue(name = "col", value = row.col, jdbcType = JDBCType.VARCHAR, encoder = StringTS.string(100).encoder),
                    QueryValue(name = "fk", value = row.fk, jdbcType = JDBCType.CHAR, encoder = UUIDTS.sqlite.encoder),
                )
            )
        }
    }

    @Test
    override fun `test createProcedure`() = Unit

    @Test
    override fun `test callProcedure`() = Unit

    @Test
    override fun `test dropProcedure`() {
//        this.ser.createProcedure()
    }
}
