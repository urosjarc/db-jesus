package com.urosjarc.dbmessiah.queries

import com.urosjarc.dbmessiah.Driver
import com.urosjarc.dbmessiah.Serializer
import com.urosjarc.dbmessiah.data.BatchQuery
import com.urosjarc.dbmessiah.exceptions.QueryException
import com.urosjarc.dbmessiah.extend.ext_isMutable
import com.urosjarc.dbmessiah.extend.ext_isOptional

/**
 * Class for performing batch operations.
 *
 * @property ser The Serializer used for generating queries and mapping objects to tables in the database.
 * @property driver The Driver used for executing the batch queries.
 */
public class BatchQueries(
    private val ser: Serializer,
    private val driver: Driver
) {
    /**
     * Inserts a batch of rows into the database.
     *
     * @param rows The iterable collection of objects representing the rows to be inserted.
     * @throws QueryException If the user provides an empty list of rows to insert.
     * @throws QueryException If any of the rows provided have an already defined auto-generated primary key.
     * @throws QueryException If any of the rows provided have a null primary key value that is not auto-generated.
     */
    public fun <T : Any> insert(rows: Iterable<T>) {
        //If user provided to us empty list we stop the proces.
        val firstRow = rows.firstOrNull() ?: throw QueryException("User want to batch insert empty list of rows")

        //Get table information
        val T = this.ser.mapper.getTableInfo(obj = firstRow)
        val RB = T.getInsertRowBuilder()

        //Check for correctness
        rows.forEachIndexed { i, row ->
            //Check for rows that are already inserted
            if (T.primaryColumn.autoGenerated) {
                if (T.primaryColumn.getValue(obj = row) != null)
                    throw QueryException("Batched row on index '$i', with already defined auto-generated primary key, is not allowed to be inserted: $row")
            } else //Check if user forgot to defined primary key
                if (T.primaryColumn.getValue(obj = row) == null)
                    throw QueryException("Batched row on index '$i', with primary key value, which is not auto-generated, and also null, is not allowed to be inserted: $row")
        }

        //Get SQL statement for insertion
        val query = this.ser.insertRow(row = firstRow, batch = true)

        //Execute query
        val batchQuery = BatchQuery(sql = query.sql, valueMatrix = rows.map { RB.queryValues(obj = it).toList() })

        //Return count of updated elements
        this.driver.batch(batchQuery = batchQuery)
    }

    /**
     * Updates a batch of rows in the database.
     *
     * @param rows The iterable collection of objects representing the rows to be updated.
     * @throws QueryException If the user provides an empty list of rows to update.
     * @throws QueryException If any of the rows provided have an undefined primary key value.
     */
    public fun <T : Any> update(rows: Iterable<T>) {
        //If user provided to us empty list we stop the proces.
        val firstRow = rows.firstOrNull() ?: throw QueryException("User want to batch update empty list of rows")

        //Get table information
        val T = this.ser.mapper.getTableInfo(obj = firstRow)
        val RB = T.getUpdateRowBuilder()

        //Check for correctness
        rows.forEachIndexed { i, row ->
            //Check for rows that are already inserted
            if (T.primaryColumn.getValue(obj = row) == null)
                throw QueryException("Batched row on index '$i', can't be updated with undefined primary key value: $row")
        }

        //Get SQL statement for updating
        val query = this.ser.updateRow(row = firstRow)

        //Build QueryValue matrix
        val valueMatrix = rows.map { listOf(*RB.queryValues(obj = it), T.primaryColumn.queryValueFrom(obj = it)) }

        //Build batch query
        val batchQuery = BatchQuery(sql = query.sql, valueMatrix = valueMatrix)

        //Return result
        this.driver.batch(batchQuery = batchQuery)
    }

    /**
     * Deletes a batch of rows from the database.
     *
     * @param rows The iterable collection of rows to be deleted.
     * @throws QueryException If the user provides an empty list of rows to delete.
     * @throws QueryException If any of the rows provided have an undefined primary key value.
     */
    public fun <T : Any> delete(rows: Iterable<T>) {
        //If user provided to us empty list we stop the proces.
        val firstRow = rows.firstOrNull() ?: throw QueryException("User want to batch delete empty list of rows")

        //Get table information
        val T = this.ser.mapper.getTableInfo(obj = firstRow)

        //Check for correctness
        rows.forEachIndexed { i, row ->
            //Check for rows that are already inserted
            if (T.primaryColumn.getValue(obj = row) == null)
                throw QueryException("Batched row on index '$i', can't be deleted with undefined primary key value: $row")
        }

        //Get SQL statement for deleting
        val query = this.ser.deleteRow(row = firstRow)

        //Build QueryValue matrix
        val valueMatrix = rows.map { listOf(T.primaryColumn.queryValueFrom(obj = it)) }

        //Build batch query
        val batchQuery = BatchQuery(sql = query.sql, valueMatrix = valueMatrix)

        //Return number of rows modified
        this.driver.batch(batchQuery = batchQuery)

        /**
         * If user code allows we want to reset the primary column to null to make row
         */
        if (T.primaryColumn.kprop.ext_isMutable && T.primaryColumn.kprop.ext_isOptional)
            rows.forEach { T.primaryColumn.setValue(it, null) }
    }
}
